
//: Structs

struct Point {
    
    // 2 stored properties
    let x: Int
    let y: Int
    
    // this is auto generated by swift
    // all stored properties must have some assigned value
    init(x: Int, y: Int) {
        self.x = x
        self.y = y
    }
    
    
    func points(inRange range: Int = 1) -> [Point] {
        //var results: [Point] = [] 
        var results = [Point]()
        
        // didn't implement
        results.append(Point(x: x, y: y))
        
        return results
    }
}

let p1 = Point(x: 20, y: 7)  // instance of the struct; instances of structs are objects
p1.points()





//: Classes
// compared to structs, do not provide a default constructor

class Enemy {
    
    // these are also called stored properties
    var life: Int = 2
    let position: Point
    
    // all stored properties must have a value by the end of the init method
    init(x: Int, y: Int) {
        self.position = Point(x: x, y: y)
    }
    
    func decreaseLife(by factor: Int) {
        life -= factor
    }
}


//: Inheritance
// when initializing subclasses, initialize values unique to the subclass, then initialize values of super class

class SuperEnemy: Enemy {
    
    let isSuper = true
    
    // note, the init method is also inherited from the super class
    override init(x: Int, y: Int) {
        super.init(x: x, y: y)
        self.life = 50
    }
    
    // same syntax for overriding methods
    override func decreaseLife(by factor: Int) {
        // do something
    }
}

//: Structs vs Classes
/*
 structs implement a default initializer, while classes do not
 structs are a value type -- values are copied when a struct is assigned to a variable or passed into a function
 classes are a reference type -- reference to the existing instance is used when assigned to a avariable or passed into a function
 
 rule of thumb: use structs for simple objects
 
 note: Arrays, Strings, and Dictionaries are all value types
 */
